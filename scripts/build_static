#!/bin/bash

home="/home/vcap"
app_path="${home}/app"
html_path="${app_path}/html"

source ${home}/.bashrc

mkdir -p ${html_path}

export PYTHONWARNINGS="ignore:Unverified HTTPS request"

export application_uri=$(echo $VCAP_APPLICATION | jq -r '.application_uris[]')

export AWS_ACCESS_KEY_ID=$(echo $VCAP_SERVICES | jq -r '.s3[] | select(.name | strings | test("static")).credentials.access_key_id')
export AWS_SECRET_ACCESS_KEY=$(echo $VCAP_SERVICES | jq -r '.s3[] | select(.name | strings | test("static")).credentials.secret_access_key')
export AWS_DEFAULT_REGION=$(echo $VCAP_SERVICES | jq -r '.s3[] | select(.name | strings | test("static")).credentials.region')

export bucket_name=$(echo $VCAP_SERVICES | jq -r '.s3[] | select(.name | strings | test("static")).name')
export bucket=$(echo $VCAP_SERVICES | jq -r '.s3[] | select(.name | strings | test("static")).credentials.bucket')
export bucket_endpoint=$(echo $VCAP_SERVICES | jq -r '.s3[] | select(.name | strings | test("static")).credentials.endpoint')

export ssg_endpoint="https://ssg-${environment}.vote.gov"
[ "${environment}" = "prod" ] && export ssg_endpoint="https://ssg.vote.gov"

cd ${app_path}
echo "Running 'drush tome:static' in '${environment}'..."
drush tome:static --uri=${ssg_endpoint} --process-count=2 --retry-count=0 -y
drush tome:static-export-path '/sitemap.xml,/sitemap_generator/default/sitemap.xsl' --uri=${ssg_endpoint} --process-count=2 --retry-count=0 -y
echo "'drush tome:static' task completed!"

#Process NVRF API Endpoints
#Translated Languages (this will need to be updated as we support additional languages)
languages=('ar' 'bn' 'fr' 'es' 'km' 'ko' 'hi' 'ht' 'nv' 'pt' 'tl' 'vi' 'ru' 'ypk' 'zh' 'zh-hans')
#API URLS
apiPaths=('api/nvrf/states' 'api/nvrf/cards' 'api/nvrf/pages' 'api/nvrf/ab_messages')
#Defatult api endpoint filename
jsonFileName='data.json'
echo "***************************************************************"
echo "************** Generating NVRF API Json files. ****************"
echo "***************************************************************"
for apiPath in ${apiPaths[@]}; do
    apiEndpoint="/${apiPath}/${jsonFileName}"

    for language in ${languages[@]}; do
        translatedApiEndpoint="${apiEndpoint}?langcode=${language}"
        newTranslatedApiEndpoint="/${language}/${apiPath}/${jsonFileName}"
        defaultFilePath="${html_path}/${apiPath}/${jsonFileName}"
        newFilePath="${html_path}${newTranslatedApiEndpoint}"
        newDirectory="${html_path}/${language}/${apiPath}/"
        echo "** Tome export in progress..."
        echo "** API Endpoint: ${translatedApiEndpoint}"
        drush tome:static-export-path "${translatedApiEndpoint}" --return-json --uri=${ssg_endpoint} --process-count=2 --retry-count=0 -y 2>/dev/null

        until [ -f ${defaultFilePath} ]
        do
            echo "** Waiting for Tome to finish exporting the file, ${defaultFilePath} ..."
            sleep 1
        done

        echo "** New API Endpoint: ${newTranslatedApiEndpoint}"
        mkdir -p ${newDirectory}
        mv ${defaultFilePath} ${newDirectory}
        echo "***************************************************************"
    done

    echo "** Tome export in progress..."
    echo "** API Endpoint: ${apiEndpoint}"
    drush tome:static-export-path "${apiEndpoint}" --return-json --uri=${ssg_endpoint} --process-count=2 --retry-count=0 -y 2>/dev/null
    echo "***************************************************************"
done

echo "Adding missing Core assets vendor directory"
mkdir -p ${html_path}/core/assets
cp -rfp ${app_path}/web/core/assets/vendor ${html_path}/core/assets/
echo "Missing Core assets files completed!"

echo "Adding missing module files for Sitemap"
mkdir -p ${html_path}/modules/contrib/simple_sitemap/xsl
cp -rfp ${app_path}/web/modules/contrib/simple_sitemap/xsl/* ${html_path}/modules/contrib/simple_sitemap/xsl/
echo "Missing module files for Sitemap completed!"

echo "Adding Vote.gov custom theme assets"
mkdir -p ${html_path}/themes/custom/vote_gov
cp -rfp ${app_path}/web/themes/custom/vote_gov/dist ${html_path}/themes/custom/vote_gov/
cp -rfp ${app_path}/web/themes/custom/vote_gov/fonts ${html_path}/themes/custom/vote_gov/
cp -rfp ${app_path}/web/themes/custom/vote_gov/img ${html_path}/themes/custom/vote_gov/
cp -rfp ${app_path}/web/themes/custom/vote_gov/json ${html_path}/themes/custom/vote_gov/
echo "Adding Vote.gov custom theme assets - completed!"

cd ${html_path}
echo "Copying static files to '${bucket_name}'..."
aws s3 sync . s3://${bucket} --delete --no-verify-ssl 2>/dev/null
aws s3 website s3://${bucket} --index-document index.html --error-document /404/index.html  --no-verify-ssl 2>/dev/null
echo "Copy to '${bucket_name}' completed!"

# export objects=($(aws s3 ls s3://${bucket} --recursive --no-verify-ssl 2>/dev/null | awk '{print $(NF)}' | sed -z -e 's/\n/ /g'))

# for object in "${objects[@]}"; do
#   echo $object
#   aws s3api put-object-acl --bucket s3://${bucket} --key $object --grant-full-control id=c0eaf99010b9e4b073052b3a9b242980a2badf4e1db4044f53f49950609bf6cf --grant-read uri=http://acs.amazonaws.com/groups/global/AllUsers --no-verify-ssl 2>/dev/null
# done
