{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# Set vars for the hero image. #}
{% set image_url = paragraph.field_bx_media.entity.field_media_image.entity.uri.getString() %}
{% set image_style_url = image_url | image_style('max_2600x2600') %}
{% set bottom_margin = content.field_bx_bottom_padding.0["#markup"] %}

{% set classes = [
  'usa-hero',
  bottom_margin == 0 ? 'margin-bottom-8' : 'margin-bottom-0',
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished'
] %}

{% block paragraph %}
  <section{{ attributes.addClass(classes).setAttribute('aria-label', ('Introduction'|t)  ) }}
    style="background-image: url('{{ file_url(image_style_url) }}')">
    {% block content %}
      <div class="grid-container">
        <div class="usa-hero__callout">

          <h1 class="usa-hero__heading">
            {% if content.field_bx_title_eyebrow %}
              <span class="usa-hero__heading--alt">
                {{ content.field_bx_title_eyebrow | field_value }}
              </span>
              {{ content.field_bx_title | field_value }}
            {% endif %}
          </h1>

          {% if content.field_bx_text | render %}
            <p>{{ content.field_bx_text | field_value }}</p>
          {% endif %}

          {% if content.field_bx_link %}
            <a class="usa-button usa-button--outline usa-button--inverse"
               href="{{ content.field_bx_link.0["#url_title"] }}"
               title="{{ content.field_bx_link.0["#title"] }}">
              {{ content.field_bx_link.0["#title"] }}
            </a>
          {% endif %}

        </div>
      </div>
    {% endblock %}
  </section>
{% endblock paragraph %}
