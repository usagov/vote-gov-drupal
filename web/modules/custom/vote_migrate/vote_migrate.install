<?php

/**
 * @file
 * Install, update and uninstall functions for vote_migrate module.
 */

declare(strict_types = 1);

use Drupal\migrate_plus\Entity\Migration;

/**
 * Implements hook_install().
 *
 * We need the urls to be absolute for the JSON source plugin to read them, but
 * the static configuration files on disk doesn't know the server and port to
 * use. So, in the .yml files we provide the JSON resources relative to the
 * site root and here rewrite them to fully-qualified paths.
 */
function vote_migrate_install(): void {

  $application_environment = getenv('environment') ?? 'local';
  $server_http_host = $_SERVER['SERVER_NAME'];

  if ($application_environment != 'local') {
    // Use the internal urls for cloud based environmements.
    switch ($application_environment) {
      case "dev":
        $server_http_host = 'vote-drupal-dev.apps.internal:8080';
        break;

      case "prod":
        $server_http_host = 'vote-drupal-prod.apps.internal:8080';
        break;

      case "stage":
        $server_http_host = 'vote-drupal-stage.apps.internal:8080';
        break;

      case "test":
        $server_http_host = 'vote-drupal-test.apps.internal:8080';
        break;
    }
  }

  /** @var \Drupal\migrate_plus\Entity\MigrationInterface $state_territory_translations_migration */
  $state_territory_translations_migration = Migration::load('state_territory_translations');
  if ($state_territory_translations_migration) {
    $source = $state_territory_translations_migration->get('source');
    $request = \Drupal::request();
    $urls = [];
    foreach ($source['urls'] as $url) {
      $urls[] = 'http://' . $server_http_host . $url;
    }
    $source['urls'] = $urls;
    $state_territory_translations_migration->set('source', $source);
    $state_territory_translations_migration->save();
  }

  /** @var \Drupal\migrate_plus\Entity\MigrationInterface $state_territory_migration */
  $state_territory_migration = Migration::load('state_territory');
  if ($state_territory_migration) {
    $source = $state_territory_migration->get('source');
    $request = \Drupal::request();
    $urls = [];
    foreach ($source['urls'] as $url) {
      $urls[] = 'http://' . $server_http_host . $url;
    }
    $source['urls'] = $urls;
    $state_territory_migration->set('source', $source);
    $state_territory_migration->save();
  }
}

/**
 * Implements hook_uninstall().
 */
function vote_migrate_uninstall() {
  // Delete all vote_migrate settings variables.
  \Drupal::configFactory()->getEditable('migrate_plus.migration_group.nodes__state_territory')->delete();
  \Drupal::configFactory()->getEditable('migrate_plus.migration.state_territory_translations')->delete();
  \Drupal::configFactory()->getEditable('migrate_plus.migration.state_territory')->delete();
}
