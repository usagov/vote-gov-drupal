<?php

/**
 * Update tables for nvrf_step field instances with step_aria_label and
 * edit_aria_label fields.
 */
function vote_fields_update_10001() {
  $field_storage = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  // Get field instances for field type, nvrf_step.
  $fields = $field_storage->loadByProperties([
    'type' => 'nvrf_step',
  ]);

  //Loop through the field instances and update the tables that they are found in.
  foreach ($fields as $field) {
    $entity_type = $field->get('entity_type');
    $field_name = $field->getName();

    if ($table_name = get_field_table_name($entity_type, $field)) {
      update_table_10001($table_name, $field_name);
    }

    if ($revision_table_name = get_field_table_name($entity_type, $field, TRUE)) {
      update_table_10001($revision_table_name, $field_name);
    }
  }
}

/**
 * Helper function to apply db table updates for update #10001.
 */
function update_table_10001($table_name, $field_name) {

  $database = \Drupal::database();

  // Check if the fields already exist before adding them.
  $schema = $database->schema();
  $field_name_prefix = $field_name . '_';

  if ($schema->tableExists($table_name)) {
    if (!$schema->fieldExists($table_name, $field_name_prefix . 'step_aria_label')) {
      $schema->addField($table_name,
        $field_name_prefix . 'step_aria_label',
        ['type' => 'varchar',
          'length' => 255,
          'binary' => FALSE,
          'not null' => FALSE,
        ]);
    }
    if (!$schema->fieldExists($table_name, $field_name_prefix . 'edit_aria_label')) {
      $schema->addField($table_name,
      $field_name_prefix . 'edit_aria_label', [
        'type' => 'varchar',
        'length' => 255,
        'binary' => FALSE,
        'not null' => FALSE,
      ]);
    }
  }
}

/**
 * Utility function to retrieve the db field names for a given field.
 */
function get_field_table_name($entity_type_id, $field, $revision=FALSE) {
  $entity_type_manager = \Drupal::entityTypeManager();
  $storage = $entity_type_manager->getStorage($entity_type_id);

  if ($storage) {
    $table_mapping = $storage->getTableMapping();

    if ($revision) {
      return $table_mapping->getDedicatedRevisionTableName($field);
    }
    else {
      return $table_mapping->getFieldTableName($field->getName());
    }
  }

  return NULL;
}
