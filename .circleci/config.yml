version: 2.1
parameters:
  backup:
    type: string
    default: "none"
  restore:
    type: string
    default: "none"
  scheduled_backup:
    type: boolean
    default: false
  build_static:
    type: boolean
    default: false
  drush_cron:
    type: boolean
    default: false
jobs:
  build-static:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Install cloudfoundry & dependencies"
          command: |
            source ./scripts/pipeline/deb-basic-deps.sh
            source ./scripts/pipeline/deb-cf-install.sh
      - run:
          name: "Generate Static Site"
          command: |
            source ./scripts/pipeline/exports.sh ${CIRCLE_BRANCH}
            source ./scripts/pipeline/cloud-gov-login.sh

            cf run-task ${project}-drupal-${CIRCLE_BRANCH} --command "ENV=${CIRCLE_BRANCH} scripts/build_static" --name "${project}-${CIRCLE_BRANCH}-tome"  -k "2G" -m 256M
  build-theme:
    docker:
      - image: node:18-slim
    steps:
      - checkout
      - run:
          name: "Build theme"
          command: |
            source ./scripts/pipeline/build-theme.sh
      - persist_to_workspace:
          root: ~/
          paths:
            - project/web/themes/custom/vote_gov/dist
  cypress:
    docker:
      - image: cypress/included:cypress-12.3.0-node-16.18.1-chrome-109.0.5414.74-1-ff-109.0-edge-109.0.1518.52-1
    environment:
      cypress_pipeline: 1
      cypress_cloudgov_application_name: "${project}-drupal-${CIRCLE_BRANCH}"
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Install cloudfoundry dependencies"
          command: |
            source ./scripts/pipeline/deb-basic-deps.sh
            source ./scripts/pipeline/deb-cf-install.sh
      - run:
          name: "Cypress"
          command: |
            cd testing
            cypress_baseurl="ssg-${CIRCLE_BRANCH}.vote.gov"
            npm install
            npm run cy:pipeline:frontEnd
            npm run cy:pipeline:axe
      - store_artifacts:
          path: testing/cypress/screenshots
  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Install cloudfoundry dependencies"
          command: |
            source ./scripts/pipeline/deb-basic-deps.sh
            source ./scripts/pipeline/deb-cf-install.sh
      - run:
          name: "Deploy"
          command: |
            source ./scripts/pipeline/exports.sh ${CIRCLE_BRANCH}
            source ./scripts/pipeline/cloud-gov-login.sh
            source ./scripts/pipeline/cloud-gov-deploy.sh
  downsync:
    docker:
      - image: cimg/base:stable
    environment:
      BACKUP_ENV: << pipeline.parameters.backup>>
      RESTORE_ENV: << pipeline.parameters.restore>>
    steps:
      - checkout
      - run:
          name: "Install cloudfoundry & dependencies"
          command: |
            source ./scripts/pipeline/deb-basic-deps.sh
            source ./scripts/pipeline/deb-cf-install.sh
            source ./scripts/pipeline/deb-mysql-client-install.sh

            cf install-plugin -f https://github.com/cloud-gov/cf-service-connect/releases/download/1.1.0/cf-service-connect-linux-amd64
      - run:
          name: "Run downsync"
          command: |
            source ./scripts/pipeline/exports.sh "${BACKUP_ENV}"
            source ./scripts/pipeline/cloud-gov-login.sh
            source ./scripts/pipeline/downsync-backup.sh
            cf logout

            source ./scripts/pipeline/exports.sh "${RESTORE_ENV}"
            source ./scripts/pipeline/cloud-gov-login.sh
            source ./scripts/pipeline/downsync-restore.sh
  drush-cron:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Install cloudfoundry & dependencies"
          command: |
            source ./scripts/pipeline/deb-basic-deps.sh
            source ./scripts/pipeline/deb-cf-install.sh
      - run:
          name: "Drush Cron"
          command: |
            source ./scripts/pipeline/exports.sh ${CIRCLE_BRANCH}
            source ./scripts/pipeline/cloud-gov-login.sh

            cf run-task ${project}-drupal-${CIRCLE_BRANCH} --command "drush --uri=${cms_uri} cron" --name "${project}-${CIRCLE_BRANCH}-cron"  -k "2G" -m 512M
  php-lint:
    docker:
      - image: php:8.2-alpine
    steps:
      - run:
          name: "Install PHP dependencies"
          command: |
            apk add git curl php-curl php-dom php-gd php-xml
      - checkout
      - run:
          name: Install PHPCS
          command: |
            source ./scripts/pipeline/composer-install.sh
      - run:
          name: "PHP CodeSniffer"
          command: |
            source ./scripts/pipeline/phpcs-install.sh
            phpcs \
              --standard=Drupal \
              --ignore=*/node_modules/* \
              --extensions=php,module,inc,install,test,profile,theme,info,yml,twig \
              --report=csv \
              --report-file=/tmp/phpcs.csv \
              ~/project/web
      - store_artifacts:
          path: /tmp/phpcs.csv
          destination: phpcs_<<pipeline.number>>.csv
  scheduled-backup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Install cloudfoundry & dependencies"
          command: |
            source ./scripts/pipeline/deb-basic-deps.sh
            source ./scripts/pipeline/deb-cf-install.sh
            source ./scripts/pipeline/deb-mysql-client-install.sh
            source ./scripts/pipeline/deb-awscli.sh

            cf install-plugin -f https://github.com/cloud-gov/cf-service-connect/releases/download/1.1.0/cf-service-connect-linux-amd64
      - run:
          name: "Run backup"
          command: |
            export BACKUP_ENV=${CIRCLE_BRANCH}
            source ./scripts/pipeline/exports.sh "${CIRCLE_BRANCH}"
            source ./scripts/pipeline/cloud-gov-login.sh
            source ./scripts/pipeline/downsync-backup.sh
            ./scripts/pipeline/scheduled_backup.sh "${prod_cf_space}"
  snyk:
    docker:
      - image: snyk/snyk:php
    # environment:
    #   SNYK_TOKEN: ${SNYK_TOKEN }
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Snyk"
          command: |
            snyk test --org=${SNYK_ORG} --severity-threshold=$THRESHOLD
  link-validation:
    docker:
      - image: cypress/included:cypress-12.3.0-node-16.18.1-chrome-109.0.5414.74-1-ff-109.0-edge-109.0.1518.52-1
    environment:
      cypress_pipeline: 1
      cypress_cloudgov_application_name: "${project}-drupal-${CIRCLE_BRANCH}"
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Install cloudfoundry dependencies"
          command: |
            source ./scripts/pipeline/deb-basic-deps.sh
            source ./scripts/pipeline/deb-cf-install.sh
      - run:
          name: "Cypress Internal Links"
          command: |
            cd testing
            cypress_baseurl="ssg-${CIRCLE_BRANCH}.vote.gov"
            npm install
            npm run cy:pipeline:links
      - run:
          name: "Cypress External Links"
          command: |
            cd testing
            cypress_baseurl="ssg-${CIRCLE_BRANCH}.vote.gov"
            npm install
            npm run cy:pipeline:links
            npm run cy:pipeline:proofer
          when: always
workflows:
  deploy-workflow: 
    when:
      and:
        - equal: [webhook, << pipeline.trigger_source >>]
        - not:
            equal: [ prod, << pipeline.git.branch >> ]
    jobs:
      - php-lint
      - snyk
      - build-theme:
          filters:
            branches:
              only:
                - test
                - dev
                - stage
      - deploy:
          filters:
            branches:
              only:
                - test
                - dev
                - stage
          requires:
            - build-theme
      - build-static:
          filters:
            branches:
              only:
                - test
                - dev
                - stage
          requires:
            - deploy
      - cypress:
          filters:
            branches:
              only:
                - test
                - dev
                - stage
          requires:
            - build-static
  deploy-prod-workflow: 
    when:
      and:
        - equal: [webhook, << pipeline.trigger_source >>]
        - equal: [ prod, << pipeline.git.branch >> ]
    jobs:
      - approval-prod:
          type: approval
      - build-theme:
          requires:
            - approval-prod
      - deploy:
          requires:
            - build-theme
      - build-static:
          requires:
            - deploy
  build-static-workflow:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ true, << pipeline.parameters.build_static >> ]
    jobs:
      - build-static
  link-validation-cron-workflow: 
    triggers:
      - schedule:
          cron: '0 13 * * 1,4'  
    jobs:
      - link-validation:
          filters:
                branches:
                  only:
                    - stage
  drush-cron-workflow:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ true, << pipeline.parameters.drush_cron >> ]
    jobs:
      - drush-cron
  scheduled-backup-workflow:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ true, << pipeline.parameters.scheduled_backup >> ]
    jobs:
      - scheduled-backup
  downsync-workflow:
    when:
      and:
        - equal:  [api, << pipeline.trigger_source >> ]
        - or:
          - equal: [ dev, << pipeline.parameters.backup >> ]
          - equal: [ prod, << pipeline.parameters.backup >> ]
          - equal:  [stage, << pipeline.parameters.backup >> ]
          - equal: [ test, << pipeline.parameters.backup >> ]
        - or:
          - equal: [ dev, << pipeline.parameters.restore >> ]
          - equal: [ stage, << pipeline.parameters.restore >> ]
          - equal: [ test, << pipeline.parameters.restore >> ]
    jobs:
      - downsync
