version: 2.1
parameters:
  backup:
    type: string
    default: "none"
  restore:
    type: string
    default: "none"
  scheduled-backup:
    type: boolean
    default: false
  upkeep:
    type: boolean
    default: false
jobs:
  upkeep:
    docker:
      - image: cimg/base:current-22.04
    steps:
      - checkout
      - run:
          name: "Install cloudfoundry & dependencies"
          command: |
            source ./scripts/pipeline/deb-basic-deps.sh
            source ./scripts/pipeline/deb-cf-install.sh
      - run:
          name: "Run Drush Cron and Generate Static Site"
          no_output_timeout: 30m
          command: |
            source ./scripts/pipeline/exports.sh ${CIRCLE_BRANCH}
            source ./scripts/pipeline/cloud-gov-login.sh
            cf run-task ${project}-drupal-${CIRCLE_BRANCH} --command "ENV=${CIRCLE_BRANCH} scripts/upkeep" --name "${project}-${CIRCLE_BRANCH}-upkeep"  -k "2G" -m 1024M
  build-theme:
    docker:
      - image: node:22-slim
    steps:
      - checkout
      - run:
          name: "Build theme"
          no_output_timeout: 30m
          command: |
            source ./scripts/pipeline/build-theme.sh
      - persist_to_workspace:
          root: ~/
          paths:
            - project/web/themes/custom/votegov/dist
  cypress:
    docker:
      - image: cypress/included:cypress-14.2.0-node-22.14.0-chrome-134.0.6998.88-1-ff-136.0.2-edge-134.0.3124.68-1
    environment:
      cypress_pipeline: 1
      cypress_cloudgov_application_name: "${project}-drupal-${CIRCLE_BRANCH}"
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Cypress - frontend tests"
          command: |
            cd testing
            npm install
            npm run cy:pipeline:frontEnd
      - run:
          name: "Cypress - frontend tests - rerun"
          command: |
            sleep 120
            echo "I am the result of frontend tests failed job"
            cd testing
            npm install
            npm run cy:pipeline:frontEnd
          when: on_fail
      - run:
          name: "Cypress - axe tests"
          command: |
            cd testing
            npm install
            npm run cy:pipeline:axe
      - run:
          name: "Cypress - axe tests - rerun"
          command: |
            sleep 120
            echo "I am the result of axe tests failed job"
            cd testing
            npm install
            npm run cy:pipeline:axe
          when: on_fail
      - store_artifacts:
          path: testing/cypress/screenshots
  deploy:
    docker:
      - image: cimg/base:current-22.04
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Install cloudfoundry dependencies"
          command: |
            source ./scripts/pipeline/deb-basic-deps.sh
            source ./scripts/pipeline/deb-cf-install.sh
      - run:
          name: "Deploy"
          no_output_timeout: 30m
          command: |
            source ./scripts/pipeline/exports.sh ${CIRCLE_BRANCH}
            source ./scripts/pipeline/cloud-gov-login.sh
            source ./scripts/pipeline/cloud-gov-deploy.sh
  post-deploy:
    docker:
      - image: cimg/base:current-22.04
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Install cloudfoundry dependencies"
          command: |
            source ./scripts/pipeline/deb-basic-deps.sh
            source ./scripts/pipeline/deb-cf-install.sh
      - run:
          name: "Post Deploy"
          no_output_timeout: 30m
          command: |
            source ./scripts/pipeline/exports.sh ${CIRCLE_BRANCH}
            source ./scripts/pipeline/cloud-gov-login.sh
            source ./scripts/pipeline/cloud-gov-post-deploy.sh
  post-deploy-upkeep:
    docker:
      - image: cimg/base:current-22.04
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Install cloudfoundry dependencies"
          command: |
            source ./scripts/pipeline/deb-basic-deps.sh
            source ./scripts/pipeline/deb-cf-install.sh
      - run:
          name: "Post Deploy Upkeep"
          no_output_timeout: 30m
          command: |
            source ./scripts/pipeline/exports.sh ${CIRCLE_BRANCH}
            source ./scripts/pipeline/cloud-gov-login.sh
            source ./scripts/pipeline/cloud-gov-post-deploy-upkeep.sh
  downsync-backup:
    docker:
      - image: cimg/base:current-22.04
    steps:
      - checkout
      - run:
          name: "Install cloudfoundry & dependencies"
          command: |
            source ./scripts/pipeline/deb-basic-deps.sh
            source ./scripts/pipeline/deb-cf-install.sh
            source ./scripts/pipeline/deb-mysql-client-install.sh
            source ./scripts/pipeline/deb-awscli.sh

            cf install-plugin -f https://github.com/cloud-gov/cf-service-connect/releases/download/v1.1.4/cf-service-connect_linux_amd64
      - run:
          name: "Run downsync-backup"
          no_output_timeout: 30m
          command: |
            source ./scripts/pipeline/exports.sh "prod"
            source ./scripts/pipeline/cloud-gov-login.sh
            source ./scripts/pipeline/prod-db-backup.sh
            cf logout
  downsync-restore:
    docker:
      - image: cimg/base:current-22.04
    environment:
      RESTORE_ENV: << pipeline.parameters.restore>>
    steps:
      - checkout
      - run:
          name: "Install cloudfoundry & dependencies"
          command: |
            source ./scripts/pipeline/deb-basic-deps.sh
            source ./scripts/pipeline/deb-cf-install.sh
            source ./scripts/pipeline/deb-mysql-client-install.sh
            source ./scripts/pipeline/deb-awscli.sh

            cf install-plugin -f https://github.com/cloud-gov/cf-service-connect/releases/download/v1.1.4/cf-service-connect_linux_amd64
      - run:
          name: "Run downsync"
          no_output_timeout: 30m
          command: |
            source ./scripts/pipeline/exports.sh "${RESTORE_ENV}"
            source ./scripts/pipeline/cloud-gov-login.sh
            source ./scripts/pipeline/downsync-preprod.sh
  php-lint:
    docker:
      - image: php:8.3-alpine
    steps:
      - run:
          name: "Install PHP dependencies"
          command: |
            apk add git curl php-curl php-dom php-gd php-xml
      - checkout
      - run:
          name: Install PHPCS
          command: |
            source ./scripts/pipeline/composer-install.sh
      - run:
          name: "PHP CodeSniffer"
          command: |
            source ./scripts/pipeline/phpcs-install.sh
            phpcs \
              --standard=Drupal \
              --ignore=*/node_modules/* \
              --extensions=php,module,inc,install,test,profile,theme,info,yml,twig \
              --report=csv \
              --report-file=/tmp/phpcs.csv \
              ~/project/web
      - store_artifacts:
          path: /tmp/phpcs.csv
          destination: phpcs_<<pipeline.number>>.csv
  scheduled-backup:
    docker:
      - image: cimg/base:current-22.04
    steps:
      - checkout
      - run:
          name: "Install cloudfoundry & dependencies"
          command: |
            source ./scripts/pipeline/deb-basic-deps.sh
            source ./scripts/pipeline/deb-cf-install.sh
            source ./scripts/pipeline/deb-mysql-client-install.sh
            source ./scripts/pipeline/deb-awscli.sh

            cf install-plugin -f https://github.com/cloud-gov/cf-service-connect/releases/download/v1.1.4/cf-service-connect_linux_amd64
      - run:
          name: "Run backup"
          no_output_timeout: 30m
          command: |
            export BACKUP_ENV=${CIRCLE_BRANCH}
            source ./scripts/pipeline/exports.sh "${CIRCLE_BRANCH}"
            source ./scripts/pipeline/cloud-gov-login.sh
            source ./scripts/pipeline/app-backup.sh
            ./scripts/pipeline/scheduled-backup.sh "${prod_cf_space}"
      - run:
          name: "Run backup"
          no_output_timeout: 30m
          command: |
            echo "I am the result of Run Backup failed job"
            export BACKUP_ENV=${CIRCLE_BRANCH}
            source ./scripts/pipeline/exports.sh "${CIRCLE_BRANCH}"
            source ./scripts/pipeline/cloud-gov-login.sh
            source ./scripts/pipeline/app-backup.sh
            ./scripts/pipeline/scheduled-backup.sh "${prod_cf_space}"
          when: on_fail
  link-validation:
    docker:
      - image: cypress/included:cypress-14.2.0-node-22.14.0-chrome-134.0.6998.88-1-ff-136.0.2-edge-134.0.3124.68-1
    environment:
      cypress_pipeline: 1
      cypress_cloudgov_application_name: "${project}-drupal-${CIRCLE_BRANCH}"
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Cypress Internal Links"
          command: |
            cd testing
            npm install
            npm run cy:pipeline:links
      - run:
          name: "Cypress Internal Links - rerun"
          command: |
            echo "I am the result of Internal Links failed job"
            cd testing
            npm install
            npm run cy:pipeline:links
          when: on_fail
      - run:
          name: "Cypress External Links"
          command: |
            cd testing
            npm install
            npm run cy:pipeline:proofer
      - run:
          name: "Cypress External Links - rerun"
          command: |
            echo "I am the result of External Links failed job"
            cd testing
            npm install
            npm run cy:pipeline:proofer
          when: on_fail
  home-page-redirect:
    docker:
      - image: cypress/included:cypress-14.2.0-node-22.14.0-chrome-134.0.6998.88-1-ff-136.0.2-edge-134.0.3124.68-1
    environment:
      cypress_pipeline: 1
      cypress_cloudgov_application_name: "${project}-drupal-${CIRCLE_BRANCH}"
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Home Page Redirect"
          command: |
            cd testing
            npm install
            npm run cy:pipeline:hpRedirect
workflows:
  deploy-workflow:
    when:
      and:
        - equal: [webhook, << pipeline.trigger_source >>]
        - not:
            equal: [ prod, << pipeline.git.branch >> ]
    jobs:
      - php-lint
      - build-theme:
          filters:
            branches:
              only:
                - test
                - dev
                - stage
      - deploy:
          filters:
            branches:
              only:
                - test
                - dev
                - stage
          requires:
            - build-theme
      - post-deploy:
          filters:
            branches:
              only:
                - test
                - dev
                - stage
          requires:
            - deploy
      - post-deploy-upkeep-approval:
          filters:
            branches:
              only:
                - test
                - dev
                - stage
          type: approval
          requires:
            - post-deploy
      - post-deploy-upkeep:
          filters:
            branches:
              only:
                - test
                - dev
                - stage
          requires:
            - post-deploy-upkeep-approval
      - cypress-approval:
          filters:
            branches:
              only:
                - stage
          type: approval
          requires:
            - post-deploy-upkeep
      - cypress:
          filters:
            branches:
              only:
                - stage
          requires:
            - cypress-approval
  deploy-prod-workflow:
    when:
      and:
        - equal: [webhook, << pipeline.trigger_source >>]
        - equal: [ prod, << pipeline.git.branch >> ]
    jobs:
      - approval-prod:
          type: approval
      - build-theme:
          requires:
            - approval-prod
      - deploy:
          requires:
            - build-theme
      - post-deploy:
          requires:
            - deploy
      - post-deploy-upkeep-approval:
          type: approval
          requires:
            - post-deploy
      - post-deploy-upkeep:
          requires:
            - post-deploy-upkeep-approval
  upkeep-workflow:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ true, << pipeline.parameters.upkeep >> ]
    jobs:
      - upkeep
  link-validation-workflow:
    triggers:
      - schedule:
          cron: '0 10 * * 1,4'
          filters:
            branches:
              only:
                - prod
    jobs:
      - link-validation
  home-page-redirect-workflow:
    triggers:
      - schedule:
          cron: '0 9 * * 1-5'
          filters:
            branches:
              only:
                - prod
    jobs:
      - home-page-redirect
  scheduled-backup-workflow:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ true, << pipeline.parameters.scheduled-backup >> ]
    jobs:
      - scheduled-backup
  downsync-backup:
    when:
      and:
        - equal:  [api, << pipeline.trigger_source >> ]
        - or:
          - equal: [ prod, << pipeline.parameters.backup >> ]
    jobs:
      - downsync-backup
  downsync-restore:
    when:
      and:
        - equal:  [api, << pipeline.trigger_source >> ]
        - or:
          - equal: [ dev, << pipeline.parameters.restore >> ]
          - equal: [ stage, << pipeline.parameters.restore >> ]
          - equal: [ test, << pipeline.parameters.restore >> ]
    jobs:
      - downsync-restore
