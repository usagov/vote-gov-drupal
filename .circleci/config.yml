version: 2.1
parameters:
  backup:
    type: string
    default: "none"
  restore:
    type: string
    default: "none"
jobs:
    #   - image: amazon/aws-cli:latest
    # steps:
    #   - checkout
    #   - run:
    #     name "Install MySQL..."
  build-theme:
    docker:
      - image: node:18-slim
    steps:
      - checkout
      - run:
          name: "Build theme"
          command: |
            npm install -g gulp
            cd web/themes/custom/vote_gov
            npm install
            npm run build
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/web/themes/custom/vote_gov/dist
  # cypress:
  #   docker:
  #     - image: cypress/included:cypress-12.3.0-node-16.18.1-chrome-109.0.5414.74-1-ff-109.0-edge-109.0.1518.52-1
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Cypress"
  #         command: |
  #           cd testing
  #           source ./scripts/pipeline/cloud-gov-login.sh "${CIRCLE_BRANCH}"
  #           CYPRESS_BASEURL=$(cf routes | grep drupal-${CIRCLE_BRANCH} | awk '{print $2"."$3}')
  #           sed -i "s/^    baseUrl: .*/    baseUrl: 'https:\/\/${CYPRESS_BASEURL}',/" cypress.config.js
  #           npm install
  #           npm run cy:test
  #     - store_artifacts:
  #         path: testing/cypress/screenshots
  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Install cloudfoundry dependencies"
          command: |
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt update
            sudo apt install -y cf8-cli gettext git
      - run:
          name: "Deploy"
          command: |
            source ./scripts/pipeline/cloud-gov-login.sh "${CIRCLE_BRANCH}"

            mv manifest.yml manifest.tmp
            envsubst < manifest.tmp > manifest.yml
            
            if [[ "${CIRCLE_BRANCH}" == "dev" || "${CIRCLE_BRANCH}" == "test" || "${CIRCLE_BRANCH}" == "stage" || "${CIRCLE_BRANCH}" == "prod" ]]; then            
              cf push
            fi
  downsync:
    docker:
      - image: cimg/base:stable
    environment:
      BACKUP_ENV: << pipeline.parameters.backup>>
      RESTORE_ENV: << pipeline.parameters.restore>>
      
    
    steps:
      - checkout
      - run:
          name: "Install cloudfoundry & dependencies"
          command: |
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            wget https://dev.mysql.com/get/mysql-apt-config_0.8.18-1_all.deb
            sudo dpkg -i mysql-apt-config_0.8.18-1_all.deb
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29
            sudo apt update
            sudo apt install -y cf8-cli mysql-client
            cf install-plugin -f https://github.com/cloud-gov/cf-service-connect/releases/download/1.1.0/cf-service-connect-linux-amd64

      - run:
          name: "Run downsync"
          command: |
            source ./scripts/pipeline/cloud-gov-login.sh "${BACKUP_ENV}"
            source ./scripts/pipeline/downsync-backup.sh
            cf logout
            
            source ./scripts/pipeline/cloud-gov-login.sh "${RESTORE_ENV}"
            source ./scripts/pipeline/downsync-restore.sh

  php-lint:
    docker:
      - image: php:8.2-alpine
    steps:
      - run:
          name: "Install PHP dependencies"
          command: |
            apk add git curl php-curl php-dom php-gd php-xml
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php -r "if (hash_file('sha384', 'composer-setup.php') === '55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51f492d557530c71c15d8dba01eae') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"
            mv composer.phar /usr/local/bin/composer
      - checkout
      - run:
          name: "PHP CodeSniffer"
          command: |
            git clone --branch 8.3.x http://git.drupal.org/project/coder.git
            cd coder
            composer install
            cd ..
            ls -al
            export PATH="$PATH:$HOME/project/coder/vendor/bin"
            echo $PWD
            if [[ "${CIRCLE_BRANCH}" == "dev" || "${CIRCLE_BRANCH}" == "test" || "${CIRCLE_BRANCH}" == "stage" || "${CIRCLE_BRANCH}" == "prod" ]]; then
              phpcs \
                --standard=Drupal \
                --ignore=*/node_modules/* \
                --extensions=php,module,inc,install,test,profile,theme,info,yml,twig \
                --report=csv \
                --report-file=/tmp/phpcs.csv \
                ~/project/web || exit 0
            else
              phpcs --standard=Drupal --ignore=*/node_modules/* --extensions=php,module,inc,install,test,profile,theme,info,yml,twig --report=csv --report-file=/tmp/phpcs.csv ${HOME}/project/web
            fi
      - store_artifacts:
          path: /tmp/phpcs.csv
          destination: phpcs_<<pipeline.number>>.csv
workflows:
  deploy-workflow:
    when:
      and:
        - equal: [webhook, << pipeline.trigger_source >>]
    jobs:
      # - cypress:
      #     requires:
      #       - deploy
      #     filters:
      #       branches:
      #         only:
      #           - dev
      #           - test
      - php-lint
      - build-theme:
          filters:
            branches:
              only:
                - dev
                - test
          requires:
            - php-lint
      - deploy:
          filters:
            branches:
              only:
                - dev
                - test
          requires:
            - build-theme
  downsync-workflow:
    when:
      and:
        - equal: [api, << pipeline.trigger_source >>]
        - or:
          - equal: [dev, << pipeline.parameters.backup >> ]
          - equal: [prod, << pipeline.parameters.backup >> ]
          - equal: [stage, << pipeline.parameters.backup >> ]
          - equal: [test, << pipeline.parameters.backup >> ]
        - or:
          - equal: [dev, << pipeline.parameters.restore >> ]
          - equal: [stage, << pipeline.parameters.restore >> ]
          - equal: [test, << pipeline.parameters.restore >> ]
    jobs:
      - downsync
